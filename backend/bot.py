from aiogram import Bot, Dispatcher
from aiogram.filters import Command
from aiogram.types import Message, WebAppInfo, ReplyKeyboardMarkup, KeyboardButton
from aiogram.exceptions import TelegramAPIError
import httpx
import logging

TELEGRAM_BOT_TOKEN = "8039605779:AAEm7vfc1eNRw5z9mDoPLSXa3no7W_r0Zh8"
WEB_APP_URL = "https://tg-miniapp-roullete.netlify.app/"
BACKEND_API = "https://tg-miniapp-roullete.onrender.com"

logging.basicConfig(level=logging.INFO)

bot = Bot(token=TELEGRAM_BOT_TOKEN)
dp = Dispatcher()

@dp.message(Command(commands=["start"]))
async def cmd_start(message: Message):
    web_app_button = KeyboardButton(
        text="–û—Ç–∫—Ä—ã—Ç—å –º–∏–Ω–∏-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ üé≤",
        web_app=WebAppInfo(url=WEB_APP_URL)
    )
    keyboard = ReplyKeyboardMarkup(keyboard=[[web_app_button]], resize_keyboard=True)

    try:
        await message.answer(
            "–ü—Ä–∏–≤–µ—Ç! –û—Ç–∫—Ä–æ–π—Ç–µ –º–∏–Ω–∏-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –∏ –ø—Ä–∏—Å—Ç—É–ø–∞–π—Ç–µ –∫ –∞–∫—Ü–∏–∏!",
            reply_markup=keyboard
        )
        await message.answer("‚ö†Ô∏è –≠—Ç–æ —Ç–µ—Å—Ç–æ–≤–∞—è –≤–µ—Ä—Å–∏—è –±–æ—Ç–∞. –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –ø–æ–∫–∞ –Ω–µ —Å–æ—Ö—Ä–∞–Ω—è—é—Ç—Å—è.")
    except TelegramAPIError as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")

@dp.message()
async def handle_message(message: Message):
    chat_id = message.chat.id  # –í–æ—Ç —Ç—É—Ç —Ç—ã –ø—Ä–æ—Å—Ç–æ –±–µ—Ä—ë—à—å chat_id –∏–∑ —Å–æ–æ–±—â–µ–Ω–∏—è ‚Äî –≤—Å—ë –ø—Ä–æ—Å—Ç–æ –∏ –ø–æ–Ω—è—Ç–Ω–æ

    async with httpx.AsyncClient() as client:
        try:
            resp = await client.post(f"{BACKEND_API}/spin", json={"chat_id": chat_id})
            resp.raise_for_status()
            data = resp.json()

            if data.get("already_spun"):
                await message.answer(f"–í—ã —É–∂–µ –∫—Ä—É—Ç–∏–ª–∏ —Ä—É–ª–µ—Ç–∫—É –∏ –≤—ã–∏–≥—Ä–∞–ª–∏ –ø—Ä–µ–¥–º–µ—Ç —Å ID {data['item_id']}.")
            else:
                await message.answer(f"–í—ã –∫—Ä—É—Ç–∏—Ç–µ —Ä—É–ª–µ—Ç–∫—É... –í–∞—à –ø—Ä–∏–∑ - –ø—Ä–µ–¥–º–µ—Ç —Å ID {data['item_id']}.")
        except Exception as e:
            await message.answer(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞—â–µ–Ω–∏–∏ –∫ backend: {e}")

async def start_bot():
    await dp.start_polling(bot)
