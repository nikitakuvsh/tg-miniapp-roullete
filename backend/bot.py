import logging
from aiogram import Bot, Dispatcher
from aiogram.filters import Command
from aiogram.types import Message, WebAppInfo, ReplyKeyboardMarkup, KeyboardButton
from aiogram.exceptions import TelegramAPIError
import httpx

TELEGRAM_BOT_TOKEN = "8039605779:AAEm7vfc1eNRw5z9mDoPLSXa3no7W_r0Zh8"
WEB_APP_URL = "https://tg-miniapp-roullete.netlify.app/"
BACKEND_API = "http://localhost:8000"  # –ø–æ–º–µ–Ω—è–π, –µ—Å–ª–∏ –Ω–∞–¥–æ

logging.basicConfig(level=logging.INFO)

bot = Bot(token=TELEGRAM_BOT_TOKEN)
dp = Dispatcher()

@dp.message(Command(commands=["start"]))
async def cmd_start(message: Message):
    web_app_button = KeyboardButton(
        text="–û—Ç–∫—Ä—ã—Ç—å –º–∏–Ω–∏-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ üé≤",
        web_app=WebAppInfo(url=WEB_APP_URL)
    )
    keyboard = ReplyKeyboardMarkup(keyboard=[[web_app_button]], resize_keyboard=True)

    try:
        await message.answer(
            "–ü—Ä–∏–≤–µ—Ç! –û—Ç–∫—Ä–æ–π—Ç–µ –º–∏–Ω–∏-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –∏ –ø—Ä–∏—Å—Ç—É–ø–∞–π—Ç–µ –∫ –∞–∫—Ü–∏–∏!",
            reply_markup=keyboard
        )
        await message.answer("‚ö†Ô∏è –≠—Ç–æ —Ç–µ—Å—Ç–æ–≤–∞—è –≤–µ—Ä—Å–∏—è –±–æ—Ç–∞. –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –ø–æ–∫–∞ –Ω–µ —Å–æ—Ö—Ä–∞–Ω—è—é—Ç—Å—è.")
    except TelegramAPIError as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")

@dp.message()
async def handle_message(message: Message):
    chat_id = message.chat.id

    # –ü—Ä–∏—à–ª–æ –ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å email –¥–ª—è claim? –ü—Ä–∏–º–µ—Ä: /claim email@example.com
    if message.text and message.text.startswith("/claim"):
        parts = message.text.split()
        if len(parts) != 2:
            await message.reply("–ò—Å–ø–æ–ª—å–∑—É–π –∫–æ–º–∞–Ω–¥—É —Ç–∞–∫: /claim —Ç–≤–æ—è_–ø–æ—á—Ç–∞@example.com")
            return
        email = parts[1]

        async with httpx.AsyncClient() as client:
            try:
                resp = await client.post(f"{BACKEND_API}/claim", json={"chat_id": chat_id, "email": email})
                resp.raise_for_status()
                data = resp.json()
                await message.answer(f"–ü—Ä–æ–º–æ–∫–æ–¥ –¥–ª—è {data['item_name']} –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –Ω–∞ –ø–æ—á—Ç—É!")
            except httpx.HTTPStatusError as e:
                await message.answer(f"–û—à–∏–±–∫–∞: {e.response.json().get('detail', e.response.text)}")
            except Exception as e:
                await message.answer(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –∑–∞–ø—Ä–æ—Å–∞: {e}")
        return

    # –ï—Å–ª–∏ —ç—Ç–æ –æ–±—ã—á–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ ‚Äî –ø–æ–ø—Ä–æ–±—É–µ–º —Å–¥–µ–ª–∞—Ç—å spin
    async with httpx.AsyncClient() as client:
        try:
            resp = await client.post(f"{BACKEND_API}/spin", json={"chat_id": chat_id})
            resp.raise_for_status()
            data = resp.json()
            if data["already_spun"]:
                await message.answer(f"–í—ã —É–∂–µ –∫—Ä—É—Ç–∏–ª–∏ —Ä—É–ª–µ—Ç–∫—É –∏ –≤—ã–∏–≥—Ä–∞–ª–∏ –ø—Ä–µ–¥–º–µ—Ç —Å ID {data['item_id']}.\n" +
                                     "–î–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –ø—Ä–æ–º–æ–∫–æ–¥–∞ –≤–≤–µ–¥–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É:\n/claim —Ç–≤–æ—è_–ø–æ—á—Ç–∞@example.com")
            else:
                await message.answer(f"–í—ã –∫—Ä—É—Ç–∏—Ç–µ —Ä—É–ª–µ—Ç–∫—É... –í–∞—à –ø—Ä–∏–∑ - –ø—Ä–µ–¥–º–µ—Ç —Å ID {data['item_id']}.\n" +
                                     "–ß—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å –ø—Ä–æ–º–æ–∫–æ–¥, –≤–≤–µ–¥–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É:\n/claim —Ç–≤–æ—è_–ø–æ—á—Ç–∞@example.com")
        except Exception as e:
            await message.answer(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞—â–µ–Ω–∏–∏ –∫ backend: {e}")

async def start_bot():
    await dp.start_polling(bot)
